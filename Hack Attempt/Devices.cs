using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Net;
using System.Net.NetworkInformation;
using System.Net.Sockets;
using System.Text;
using System.Windows.Forms;
using TPLinkNetworking;

namespace Hack_Attempt
{
    public partial class Devices : Form
    {
        public Devices()
        {
            InitializeComponent();
        }

        private int _lookingForNumOfDevices, _testedDevices;
        /// <summary>
        /// Scan the users current IP subnet for any active machines
        /// check to see if the responding machines have port 9999 open
        /// if port 9999 is open, attempt to get information about the module
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void toolStripButton1_Click(object sender, EventArgs e)
        {
            if (!OverSeererSearch.IsBusy)
                OverSeererSearch.RunWorkerAsync();
        }

        private void PingOnPingCompleted(object sender, PingCompletedEventArgs pingCompletedEventArgs)
        {
            var ip = (string)pingCompletedEventArgs.UserState;
            if (pingCompletedEventArgs.Reply != null && pingCompletedEventArgs.Reply.Status == IPStatus.Success)
            {
                // We got a live one here! Check it!
                var tpLinkCommand = new TPLinkConnection();
                var moduleSmartLink = new TPLinkConnection.SmartLink()
                {
                    LinkPort = 9999,
                    LinkAddress = ip
                };
                var moduleInformation = tpLinkCommand.GetModuleInformation(moduleSmartLink);

                 if (moduleInformation != null)
                 {
                     moduleSmartLink.LinkName = moduleInformation.system.get_sysinfo.alias;
                     moduleSmartLink.ModuleInformation = moduleInformation;
                 }
                 

            }
            else if (pingCompletedEventArgs.Reply == null)
            {

            }
            _testedDevices++;
        }

        private void pgbUpdateTimer_Tick(object sender, EventArgs e)
        {
            if (_testedDevices >= _lookingForNumOfDevices)
            {
                _testedDevices = 0;
                _lookingForNumOfDevices = 0;
                pg_ScanProgress.Visible = false;
                pg_ScanProgress.Value = 0;
            }
            if (_lookingForNumOfDevices == 0 || _testedDevices == 0)
                return;

            var percentComplete = (_testedDevices / _lookingForNumOfDevices) * 100;
            pg_ScanProgress.Value = percentComplete;
            if (percentComplete == 100)
                pg_ScanProgress.Visible = false;
            else if (percentComplete >= 1)
                pg_ScanProgress.Visible = true;
        }

        private void OverSeererSearch_DoWork(object sender, DoWorkEventArgs e)
        {
            _testedDevices = 0;
            _lookingForNumOfDevices = 0;
            var knownAddresses = LocalIpAddress;
            foreach (var knownAddress in knownAddresses)
            {
                var baseIp = knownAddress.ToString();
                baseIp = baseIp.Substring(0, baseIp.LastIndexOf('.'));
                for (var i = 1; i < 255; i++)
                {
                    var ip = baseIp + "." + i;
                    var ping = new Ping();
                    ping.PingCompleted += PingOnPingCompleted;
                    ping.SendAsync(ip, 2000, ip);
                    _lookingForNumOfDevices++;

                }
            }
        }

        private static IEnumerable<IPAddress> LocalIpAddress
        {
            get
            {
                var host = Dns.GetHostEntry(Dns.GetHostName());
                return host.AddressList.Where(ip => ip.AddressFamily == AddressFamily.InterNetwork).ToArray();
            }
        }
    }
}
